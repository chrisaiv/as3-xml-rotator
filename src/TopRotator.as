/** -----------------------------------------------------------* Features Rotator v.1* -----------------------------------------------------------* Description: Calls an XML file that holds a Caption, Link, and Image URL* - ---------------------------------------------------------* Created by: chrisaiv@gmail.com* Modified by: * Date Modified: September 16, 2008* - ---------------------------------------------------------* Copyright ©2008 * - ---------------------------------------------------------***/package src {	import flash.display.*;	import flash.events.*;	import flash.net.URLRequest;	import flash.net.navigateToURL;	import flash.text.TextField;	import flash.text.TextFormat;	import flash.utils.Timer;	import com.senocular.utils.KeyObject;//	import com.senocular.utils.KeyObject;		public class TopRotator extends Sprite	{		private var key:KeyObject;		private var keysDown:Object;		private var xmlURL:String;		private var xmlLoader:XMLLoader;		private var currentImage:uint;		private var totalImages:Number;		private var timer:Timer;		private var imageHolder:ImageHolder;		private var isPlaying:Boolean = true;		private var featureTabs:Array;		private var tf:TextFormat;				public function TopRotator( )		{			//Local Testing 			xmlURL = "./xml/data.xml";			//Using SWFObject2 to pass an XML URL			//xmlURL = getFlashVars().xml;			loadXML( xmlURL );						tf = new TextFormat();			tf.size = 25;			tf.color = 0xFFFFFF;			tf.align = "center";			tf.font = "Verdana";						featureTabs = new Array( btn0, btn1, btn2, btn3 );			initializeTabs( featureTabs );						//You might want to use this to Pause/Play the Auto Slideshow Portion			//pause_btn.addEventListener(MouseEvent.CLICK, pauseHandler);			prev_btn.addEventListener(MouseEvent.MOUSE_DOWN, prevHandler);			next_btn.addEventListener(MouseEvent.MOUSE_DOWN, nextHandler);			container_mc.addEventListener(MouseEvent.CLICK, goToItemDetailHandler);			container_mc.buttonMode = true;			this.key = new KeyObject( stage );						keysDown = new Object();			stage.addEventListener(KeyboardEvent.KEY_DOWN, keyPressed);			stage.addEventListener(KeyboardEvent.KEY_UP, keyReleased);		}				/***************************************		 * Helpers		***************************************/		private function getFlashVars():Object		{		     return Object( LoaderInfo( this.loaderInfo ).parameters );		}				private function initializeTabs( tabs:Array ):void		{			for each(var tab:MovieClip in tabs){							tab.txt_txt.text = ( Number( tab.name.substr(-1).toString() ) + Number( 1 ) ).toString();				formatText( tab.txt_txt );				tab.buttonMode = true;				tab.addEventListener( MouseEvent.MOUSE_OVER, onMouseOverHandler, false, 0, true );				tab.addEventListener( MouseEvent.MOUSE_OUT, onMouseOutHandler, false, 0, true );				tab.addEventListener( MouseEvent.MOUSE_DOWN, onMouseDownHandler, false, 0, true );			}					}				private function resetTabs( tabs:Array ):void		{			for each(var tab:MovieClip in tabs){				tab.gotoAndStop( "upState " );				}		}				private function formatText( text:TextField ):void		{			text.setTextFormat( tf );			text.y = (text.parent.height - text.textHeight) / 2;		}						private function loadXML( xmlURL:String ):void		{			xmlLoader = new XMLLoader();			xmlLoader.addEventListener( Event.COMPLETE, onXMLLoaded );			xmlLoader.load( xmlURL );		}				private function showCurrentTab( id:Number ):void		{							resetTabs( featureTabs );				featureTabs[id].gotoAndStop( "highlightState" );					}		private function loadImage( currentImage:Number ):void		{			//Load the Image			imageHolder.loadImage( currentImage );			//Highlight the Tab			showCurrentTab( currentImage );		}				/***************************************		 * Timer		***************************************/		private function initializeTimer( ):void		{			timer = new Timer(4500, 0);			timer.addEventListener(TimerEvent.TIMER, timerHandler);			startTimer();		}				private function startTimer( ):void		{			timer.start();		}				private function stopTimer( ):void		{			timer.stop();		}				/***************************************		 * Event Handlers		***************************************/		private function onXMLLoaded( e:Event ):void		{			XMLLoader(e.currentTarget).removeEventListener( Event.COMPLETE, onXMLLoaded);			totalImages = XMLLoader(e.currentTarget).getImageData().length;			//Randomly Select the first image			currentImage = 0;				showCurrentTab ( currentImage );			//Create a new Image Holder that will display the images			imageHolder = new ImageHolder( XMLLoader(e.currentTarget).getImageData(), container_mc, caption_txt, stage, currentImage);			//Start the Timer that will cycle through the images			initializeTimer();		}				private function keyPressed( e:KeyboardEvent ):void		{						if( key.isDown( key.RIGHT ) ) nextHandler( e );			else if( key.isDown( key.LEFT ) ) prevHandler( e );		}				private function keyReleased( e:KeyboardEvent ):void		{		}				private function onMouseOverHandler( e:MouseEvent ):void		{			var tab:MovieClip = e.currentTarget as MovieClip;				if( tab.currentLabel == "highlightState" ) tab.gotoAndStop( "highlightState" );				else tab.gotoAndStop( "overState" );		}				private function onMouseOutHandler( e:MouseEvent ):void		{			var tab:MovieClip = e.currentTarget as MovieClip;				if( tab.currentLabel == "highlightState" ) tab.gotoAndStop( "highlightState" );			else tab.gotoAndStop( "upState" );		}				private function onMouseDownHandler( e:MouseEvent ):void		{			stopTimer();			var tab:MovieClip = e.currentTarget as MovieClip;			var tabSelected:Number = Number( tab.name.substr(-1) );			//Select a new Image as ong as it's not the current one			if( tabSelected != currentImage ){								loadImage( tabSelected );				currentImage = tabSelected;			}		}						private function timerHandler( e:TimerEvent ):void		{			if ( currentImage >= totalImages - Number(1) ) currentImage = 0;			else currentImage++;			loadImage( currentImage );		}		private function prevHandler( e:* ):void		{			trace( "prevHandler: " + e.type );			stopTimer();			if( currentImage == 0 ) currentImage = totalImages - 1;			else currentImage--;									loadImage( currentImage );		}				private function nextHandler( e:* ):void		{			trace( "nextHandler: " + e.type );			stopTimer();			if( currentImage == totalImages - 1 ) currentImage = 0;			else currentImage++;						loadImage( currentImage );		}				private function pauseHandler( e:MouseEvent ):void		{			if (isPlaying) {				isPlaying = false;								stopTimer();				//pause_btn.alpha = 0.8;			} else {				isPlaying = true;				startTimer();				//pause_btn.alpha = 1;			}		}				private function goToItemDetailHandler( e:MouseEvent ):void		{			navigateToURL( new URLRequest( xmlLoader.getImageData()[currentImage].uri ), "_self" );		}			}}